#---------------------------------------------------------------------------------------------------------------------
# tagging and description section
#---------------------------------------------------------------------------------------------------------------------

# DESCRIPTION
# Sample WeBWorK problem, using PGML
# ENDDESCRIPTION
# Library tagging would go here

#---------------------------------------------------------------------------------------------------------------------
# initialization section
#---------------------------------------------------------------------------------------------------------------------

DOCUMENT();
loadMacros(
	"PGstandard.pl",
	"MathObjects.pl",
	"PGML.pl",
	"proofchecker.pl",
	"parserMultiAnswer.pl"
);
loadMacros('ProofFormula.pl');

#my $alpha = ProofFormula('Q(5, y)');
#$match = $alpha -> Replace( ProofFormula('y'), ProofFormula('x+1') );
#TEXT("match: /$match/");

# $M = Matrix(0, 1);
# @x = split //, ($M -> ans_array);
# $x = join(',', @x);

# https://github.com/openwebwork/pg/blob/master/macros/parserMultiAnswer.pl

$obj = new ProofChecker('P( co(5) + 1 )');

$obj -> given('forall(x, P(x+1) )');

$obj -> axiom({
	name => 'Universal Elimination',
	depends => ["for all statement"], # the names of statements it depends on
	test => sub {
		my $line = shift;
		my $forall = shift;
		#
		my $forallPattern = ProofFormula('forall(@variable, @predicate)');
		my $fam = $forall -> Match($forallPattern);
		if (!$fam) {
			return "not a forall statement";
		}
		my $instancePattern = $fam -> {'predicate'} -> Replace( $fam -> {'variable'}, ProofFormula('@x') );
		if (! $line -> Match($instancePattern)) {
			return "not a valid instantiation of " . $forall;
		}
		return 0;
	}
});

$obj -> show();


ENDDOCUMENT();


