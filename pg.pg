#---------------------------------------------------------------------------------------------------------------------
# tagging and description section
#---------------------------------------------------------------------------------------------------------------------

# DESCRIPTION
# Sample WeBWorK problem, using PGML
# ENDDESCRIPTION
# Library tagging would go here

#---------------------------------------------------------------------------------------------------------------------
# initialization section
#---------------------------------------------------------------------------------------------------------------------

DOCUMENT();
loadMacros(
	"PGstandard.pl",
	"MathObjects.pl",
	"PGML.pl",
	"proofchecker.pl",
	"parserMultiAnswer.pl"
);
loadMacros('ProofFormula.pl');

#my $alpha = ProofFormula('Q(5, y)');
#$match = $alpha -> Replace( ProofFormula('y'), ProofFormula('x+1') );
#TEXT("match: /$match/");

# $M = Matrix(0, 1);
# @x = split //, ($M -> ans_array);
# $x = join(',', @x);

# https://github.com/openwebwork/pg/blob/master/macros/parserMultiAnswer.pl

# 'P(co(5)+1)' is the statement that must be proven
$proof = new ProofChecker('P( cos(5) + 1 )');

# Give a hypothesis of the proof that the student is given to be true
$proof -> given('forall(x, P(x+1) )');

# Define an "axiom" (a justification for statements that appears in the drop-down)
$proof -> axiom({
	name => 'Universal Elimination',
	depends => ["for all statement"], # give a student-visible name to the argument of this reason
	test => sub {
		my $line = shift;
		my $forall = shift;
		#
		my $forallPattern = ProofFormula('forall(@variable, @predicate)');
		my $fam = $forall -> Match($forallPattern);
		if (!$fam) {
			return "not a forall statement";
		}
		my $instancePattern = $fam -> {'predicate'} -> Replace( $fam -> {'variable'}, ProofFormula('@x') );
		if (! $line -> Match($instancePattern)) {
			return "not a valid instantiation of " . $forall;
		}
		return 0;
	},
	closes => 0
});

$proof -> axiom({
	name => 'Universal Introduction',
	depends => ["statement about 'free variable'"], # student visible
	test => sub {
		my $line = shift; # ex. line: forall(x, P(x))
		my $freestatement = shift; # ex. freestatement: P(z)
		my $scope_ref = shift;
		my @scope = @$scope_ref;
		#
		my $forallPattern = ProofForumula('forall(@variable, @predicate)');
		my $fam = $line -> Match($forallPattern);
		if (!$fam) {
			return "this line should be a forall() statement";
		}
		# ex. predicate: P(x). variable: x.
		my $instancePattern = $fam -> {'predicate'} -> Replace( $fam -> {'variable'}, ProofFormula('@x') );
		my $var = $freestatement -> Match($instancePattern);
		if (!$var) {
			return $freestatement . " cannot be generalized to " . $line;
		}
		# ex. var: z
		# (ii) `var` doesn't appear in the for-all conclusion
		if ($line -> Contains($var)) {
			return $var . " should be eliminted from the generalization " . $line;
		}
		# (i) `var` doesn't occur in an accessible assumption
		foreach my $assumption (@scope) {
			if ($assumption -> {'assumption'}) {
				if ($assumption -> Contains($var)) {
					return $var . " is not a free variable since it was introduced in the assumption " . $assumption;
				}
			}
		}
		return 0;
	}
});



$proof -> show();


ENDDOCUMENT();


